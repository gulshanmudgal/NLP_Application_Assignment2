services:
  frontend:
    build:
      context: ../frontend
      dockerfile: ../docker/Dockerfile.frontend
      target: development  # Use development stage by default
    ports:
      - "3000:3000"
    volumes:
      - ../frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
    depends_on:
      - backend
    networks:
      - nlp-network

  backend:
    build:
      context: ../backend
      dockerfile: ../docker/Dockerfile.backend
      target: development  # Use development stage by default
    ports:
      - "8000:8000"
    volumes:
      - ../backend:/app
      - ../ml_models:/app/ml_models
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://user:password@postgres:5432/nlp_translation
      - PYTHONPATH=/app
    depends_on:
      - redis
      - postgres
    networks:
      - nlp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - nlp-network
    command: redis-server --save 20 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=nlp_translation
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
    networks:
      - nlp-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d nlp_translation"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx proxy for production (optional)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - frontend
      - backend
    networks:
      - nlp-network
    profiles:
      - production

volumes:
  redis_data:
  postgres_data:

networks:
  nlp-network:
    driver: bridge
