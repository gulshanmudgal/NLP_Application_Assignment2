name: CI/CD Pipeline - NLP Translation App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'

jobs:
  # Frontend Tests and Build
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run frontend linting
      run: |
        cd frontend
        npm run lint
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm run test:ci
        
    - name: Build frontend for production
      run: |
        cd frontend
        npm run build
        
    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 7

  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: nlp_translation_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: backend/requirements.txt
        
    - name: Install backend dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        pip install -r ../tests/test-requirements.txt
        
    - name: Run backend linting
      run: |
        cd backend
        black --check .
        flake8 .
        
    - name: Run backend unit tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/nlp_translation_test
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        cd backend
        python -m pytest ../tests/unit/ -v --cov=app --cov=ml_models --cov-report=xml --cov-report=term
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.xml
        flags: backend
        name: backend-coverage

  # Integration Tests  
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install test dependencies
      run: |
        pip install -r tests/test-requirements.txt
        
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker/docker-compose.yml up -d
        
    - name: Wait for services to be ready
      run: |
        sleep 30
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8000/health
        
    - name: Run integration tests
      run: |
        python tests/run_tests.py --integration --report test-results/integration-report.json
        
    - name: Run performance tests
      run: |
        python tests/run_tests.py --performance --report test-results/performance-report.json
        
    - name: Upload test reports
      uses: actions/upload-artifact@v4
      with:
        name: test-reports
        path: test-results/
        retention-days: 30
        
    - name: Stop services
      if: always()
      run: |
        docker-compose -f docker/docker-compose.yml down

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Container Images
  build-and-push:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [frontend, backend]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.${{ matrix.service }}
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging environment
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "This would trigger deployment to staging infrastructure"
        echo "Using images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
        echo "             ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        
    - name: Run staging smoke tests
      run: |
        echo "ðŸ§ª Running staging smoke tests..."
        # This would run smoke tests against staging environment
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "ðŸ“£ Staging deployment complete"

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production environment
      run: |
        echo "ðŸš€ Deploying to production environment..."
        echo "This would trigger deployment to production infrastructure"
        
    - name: Run production smoke tests
      run: |
        echo "ðŸ§ª Running production smoke tests..."
        # This would run smoke tests against production environment
        
    - name: Notify deployment status
      if: always()
      run: |
        echo "ðŸ“£ Production deployment complete"
